generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  walletAddress           String                   @unique
  name                    String?
  bio                     String?
  github                  String?
  linkedin                String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  applications            Application[]
  roles                   ContributorRole[]
  credibility             CredibilityScore?
  joinRequests            JoinRequest[]
  milestoneConfirmations  MilestoneConfirmation[]
  milestoneVerifications  MilestoneVerification[]
  notifications           Notification[]
  oracleVerifications     OracleVerification[]
  projectAbandonmentVotes ProjectAbandonmentVote[]
  teams                   TeamMember[]
  scoreData               UserScoreData?
  verifications           Verification[]
}

model Team {
  id             String            @id @default(cuid())
  name           String
  bio            String?
  website        String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  tags           String[]
  onchainTeamId  String?           @unique // Store the onchain team ID
  credibility    CredibilityScore?
  joinRequests   JoinRequest[]
  projects       Project[]
  members        TeamMember[]
  applications   Application[]      // Add applications relation
}

model TeamMember {
  id       String         @id @default(cuid())
  teamId   String
  userId   String
  joinedAt DateTime       @default(now())
  role     TeamMemberRole @default(MEMBER)
  team     Team           @relation(fields: [teamId], references: [id])
  user     User           @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

model Project {
  id                          String                       @id @default(cuid())
  teamId                      String?
  description                 String
  githubRepo                  String?
  liveUrl                     String?
  deliveryHash                String?
  status                      ProjectStatus                @default(HIRING)
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  blockchainProjectId         String?
  contractAddress             String?
  contractProjectId           String?
  actualCost                  Float?
  completedAt                 DateTime?
  estimatedCost               Float?
  estimatedDuration           Int?
  projectType                 ProjectType?                 @default(STARTUP)
  creator                     String
  fundingAmount               Float?
  minimumStake                Float?
  name                        String?
  skillsRequired              String?
  applications                Application[]
  roles                       ContributorRole[]
  funding                     Funding[]
  investorSignatures          InvestorSignature[]
  milestones                  Milestone[]
  milestoneInvestorSignatures MilestoneInvestorSignature[]
  team                        Team?                        @relation(fields: [teamId], references: [id])
  abandonmentVotes            ProjectAbandonmentVote[]
  scoreData                   ProjectScoreData?
  signatures                  ProjectSignature?
}

model Application {
  id             String            @id @default(cuid())
  projectId      String
  applicantId    String
  teamId         String?           // Add team ID to track which team applied
  coverLetter    String
  proposedStake  Float
  status         ApplicationStatus @default(PENDING)
  appliedAt      DateTime          @default(now())
  reviewedAt     DateTime?
  reviewedBy     String?
  deadline       DateTime
  quoteAmount    Float
  teamExperience String?
  teamScore      Float?
  applicant      User              @relation(fields: [applicantId], references: [id])
  project        Project           @relation(fields: [projectId], references: [id])
  team           Team?             @relation(fields: [teamId], references: [id])

  @@unique([projectId, applicantId])
}

model Milestone {
  id                 String                      @id @default(cuid())
  projectId          String
  title              String
  description        String?
  completed          Boolean                     @default(false)
  dueDate            DateTime?
  achievedValue      Float?
  createdAt          DateTime                    @default(now())
  difficulty         DifficultyTier?
  kpi                String?
  kpiCategory        KPICategory?
  lastUpdated        DateTime                    @default(now())
  oracleSource       String?
  stakeCurrency      String?
  stakedAmount       Float?
  status             MilestoneStatus             @default(PENDING)
  targetValue        Float?
  updatedAt          DateTime                    @updatedAt
  verificationMethod String?
  project            Project                     @relation(fields: [projectId], references: [id])
  confirmations      MilestoneConfirmation[]
  investorSignatures MilestoneInvestorSignature?
  verifiers          MilestoneVerification[]
  signatures         TaskSignature?
}

model MilestoneVerification {
  id               String           @id @default(cuid())
  milestoneId      String
  verifierId       String
  verificationType VerificationType
  dataSource       String?
  verifiedValue    Float?
  confidence       Float?
  comment          String?
  createdAt        DateTime         @default(now())
  milestone        Milestone        @relation(fields: [milestoneId], references: [id])
  verifier         User             @relation(fields: [verifierId], references: [id])

  @@unique([milestoneId, verifierId, verificationType])
}

model OracleDataSource {
  id              String    @id @default(cuid())
  name            String
  apiEndpoint     String?
  contractAddress String?
  description     String?
  isActive        Boolean   @default(true)
  lastVerified    DateTime?
  createdAt       DateTime  @default(now())
}

model KPITemplate {
  id          String         @id @default(cuid())
  name        String
  category    KPICategory
  kpis        Json
  difficulty  DifficultyTier
  description String?
  isPublic    Boolean        @default(true)
  createdBy   String?
  createdAt   DateTime       @default(now())
}

model ContributorRole {
  id            String         @id @default(cuid())
  userId        String
  projectId     String
  roleTitle     String
  description   String?
  verified      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  project       Project        @relation(fields: [projectId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  verifications Verification[]
}

model Verification {
  id              String          @id @default(cuid())
  verifierId      String
  roleId          String
  comment         String?
  createdAt       DateTime        @default(now())
  contributorRole ContributorRole @relation(fields: [roleId], references: [id])
  verifier        User            @relation(fields: [verifierId], references: [id])

  @@unique([verifierId, roleId])
}

model Funding {
  id                 String             @id @default(cuid())
  projectId          String
  source             String
  amount             Float
  currency           String
  txHash             String?
  receivedAt         DateTime           @default(now())
  distribution       Json?
  project            Project            @relation(fields: [projectId], references: [id])
  investorSignatures InvestorSignature?
}

model CredibilityScore {
  id          String   @id @default(cuid())
  userId      String?  @unique
  teamId      String?  @unique
  score       Float    @default(0.0)
  lastUpdated DateTime @default(now())
  details     Json?
  team        Team?    @relation(fields: [teamId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
}

model UserScoreData {
  id                String   @id @default(cuid())
  userId            String   @unique
  projectsShipped   Int      @default(0)
  onTimeRate        Float    @default(0.0)
  budgetAccuracy    Float    @default(0.0)
  abandonedProjects Int      @default(0)
  lastActivity      DateTime @default(now())
  credibilityScore  Float    @default(0.0)
  totalScore        Float    @default(0.0)
  lastDecayApplied  DateTime @default(now())
  inactiveMonths    Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model ProjectScoreData {
  id             String      @id @default(cuid())
  projectId      String      @unique
  projectType    ProjectType @default(STARTUP)
  estimatedCost  Float?
  actualCost     Float?
  budgetAccuracy Float?
  completedAt    DateTime?
  completionTime Int?
  memberScores   Json?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  project        Project     @relation(fields: [projectId], references: [id])
}

model MilestoneConfirmation {
  id               String    @id @default(cuid())
  milestoneId      String
  userId           String
  confirmedAt      DateTime  @default(now())
  timelinessScore  Float?
  delayDays        Int?
  onTimeRateImpact Float?
  milestone        Milestone @relation(fields: [milestoneId], references: [id])
  user             User      @relation(fields: [userId], references: [id])

  @@unique([milestoneId, userId])
}

model ProjectAbandonmentVote {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  votedAt   DateTime @default(now())
  reason    String?
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model OracleVerification {
  id           String    @id @default(cuid())
  userId       String
  requestId    String    @unique
  projectId    String
  repoUrl      String
  isValid      Boolean   @default(false)
  commitCount  Int       @default(0)
  verifiedAt   DateTime?
  confidence   Float?
  errorMessage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
}

model Dispute {
  id          String        @id @default(cuid())
  title       String
  description String
  status      DisputeStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProjectSignature {
  id                 String          @id @default(cuid())
  projectId          String          @unique
  teamId             String
  signatures         Json
  requiredSignatures Int
  totalMembers       Int
  status             SignatureStatus @default(PENDING)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  project            Project         @relation(fields: [projectId], references: [id])
}

model TaskSignature {
  id                 String          @id @default(cuid())
  milestoneId        String          @unique
  projectId          String
  teamId             String
  signatures         Json
  requiredSignatures Int
  totalMembers       Int
  status             SignatureStatus @default(PENDING)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  milestone          Milestone       @relation(fields: [milestoneId], references: [id])
}

model InvestorSignature {
  id                 String          @id @default(cuid())
  projectId          String
  fundingId          String          @unique
  investorAddress    String
  signatures         Json
  requiredSignatures Int
  totalInvestors     Int
  status             SignatureStatus @default(PENDING)
  amount             Float
  currency           String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  funding            Funding         @relation(fields: [fundingId], references: [id])
  project            Project         @relation(fields: [projectId], references: [id])
}

model MilestoneInvestorSignature {
  id                 String          @id @default(cuid())
  milestoneId        String          @unique
  projectId          String
  investorAddress    String
  signatures         Json
  requiredSignatures Int
  totalInvestors     Int
  status             SignatureStatus @default(PENDING)
  amount             Float
  currency           String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  milestone          Milestone       @relation(fields: [milestoneId], references: [id])
  project            Project         @relation(fields: [projectId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  data      Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model JoinRequest {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  status    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum TeamMemberRole {
  ADMIN
  MEMBER
}

enum ProjectStatus {
  HIRING
  HIRED
  FINISHED
  FUNDS_DISTRIBUTED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ProjectType {
  HACKATHON
  STARTUP
  ENTERPRISE
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  ACHIEVED
  FAILED
  AT_RISK
}

enum KPICategory {
  DEVELOPMENT
  GROWTH
  COMMUNITY
  FUNDING
  SECURITY
  PARTNERSHIP
}

enum DifficultyTier {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum VerificationType {
  AUTOMATED_ORACLE
  MANUAL_VERIFICATION
  COMMUNITY_VOTE
  AUDIT_REPORT
}

enum DisputeStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum SignatureStatus {
  PENDING
  APPROVED
  REJECTED
}
