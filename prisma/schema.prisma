generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  walletAddress  String    @unique
  name           String?
  bio            String?
  github         String?
  linkedin       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  teams          TeamMember[]
  roles          ContributorRole[]
  verifications  Verification[]
  credibility    CredibilityScore?
  milestoneVerifications MilestoneVerification[]
  notifications  Notification[]
  joinRequests   JoinRequest[]
  
  // Scoring system relationships
  scoreData      UserScoreData?
  milestoneConfirmations MilestoneConfirmation[]
  projectAbandonmentVotes ProjectAbandonmentVote[]
  oracleVerifications OracleVerification[]
}

model Team {
  id             String       @id @default(cuid())
  name           String
  bio            String?
  website        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  tags           String[]     // <-- Add this line for tags
  members        TeamMember[]
  projects       Project[]
  credibility    CredibilityScore?
  joinRequests   JoinRequest[]
}

model TeamMember {
  id        String           @id @default(cuid())
  team      Team             @relation(fields: [teamId], references: [id])
  teamId    String
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  role      TeamMemberRole   @default(MEMBER)
  joinedAt  DateTime         @default(now())

  @@unique([teamId, userId])
}

enum TeamMemberRole {
  ADMIN
  MEMBER
}

model Project {
  id                 String       @id @default(cuid())
  team               Team         @relation(fields: [teamId], references: [id])
  teamId             String
  title              String
  description        String
  githubRepo         String?
  liveUrl            String?
  deliveryHash       String? // hash of final delivery artifact (IPFS, Arweave, etc.)
  blockchainProjectId String?     // Blockchain project ID from smart contract
  status             ProjectStatus @default(ONGOING)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  
  // Scoring system fields
  projectType        ProjectType? @default(STARTUP)
  estimatedDuration  Int?         // in seconds
  estimatedCost      Float?
  actualCost         Float?
  completedAt        DateTime?

  milestones     Milestone[]
  roles          ContributorRole[]
  funding        Funding[]
  signatures     ProjectSignature[]
  investorSignatures InvestorSignature[]
  milestoneInvestorSignatures MilestoneInvestorSignature[]
  
  // Scoring system relationships
  scoreData      ProjectScoreData?
  abandonmentVotes ProjectAbandonmentVote[]
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  FAILED
  ABANDONED
}

enum ProjectType {
  HACKATHON
  STARTUP
  ENTERPRISE
}

model Milestone {
  id              String           @id @default(cuid())
  project         Project          @relation(fields: [projectId], references: [id])
  projectId       String
  title           String
  description     String?
  completed       Boolean          @default(false)
  dueDate         DateTime?
  
  // KPI-based fields
  kpi             String?          // e.g., "Acquire 1,000 users"
  targetValue     Float?           // 1000
  achievedValue   Float?           // Updated via oracles
  kpiCategory     KPICategory?     // Development, Growth, Community, Funding
  difficulty      DifficultyTier?  // Easy, Medium, Hard
  verificationMethod String?       // "GitHub Actions", "Google Analytics", etc.
  oracleSource    String?          // Data source for verification
  
  // Staking and verification
  stakedAmount    Float?           // Tokens locked for ambitious KPIs
  stakeCurrency   String?          // ETH, USDC, etc.
  verifiers       MilestoneVerification[]
  
  // Status tracking
  status          MilestoneStatus  @default(PENDING)
  lastUpdated     DateTime         @default(now())
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  signatures      TaskSignature[]
  investorSignatures MilestoneInvestorSignature[]
  
  // Scoring system relationships
  confirmations   MilestoneConfirmation[]
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  ACHIEVED
  FAILED
  AT_RISK
}

enum KPICategory {
  DEVELOPMENT
  GROWTH
  COMMUNITY
  FUNDING
  SECURITY
  PARTNERSHIP
}

enum DifficultyTier {
  EASY
  MEDIUM
  HARD
  EXPERT
}

model MilestoneVerification {
  id              String    @id @default(cuid())
  milestone       Milestone @relation(fields: [milestoneId], references: [id])
  milestoneId     String
  verifier        User      @relation(fields: [verifierId], references: [id])
  verifierId      String
  verificationType VerificationType
  dataSource      String?   // API endpoint, contract address, etc.
  verifiedValue   Float?    // Actual value from verification
  confidence      Float?    // 0-1 confidence score
  comment         String?
  createdAt       DateTime  @default(now())
  
  @@unique([milestoneId, verifierId, verificationType])
}

enum VerificationType {
  AUTOMATED_ORACLE
  MANUAL_VERIFICATION
  COMMUNITY_VOTE
  AUDIT_REPORT
}

model OracleDataSource {
  id              String    @id @default(cuid())
  name            String    // e.g., "Google Analytics", "DefiLlama"
  apiEndpoint     String?
  contractAddress String?   // For blockchain-based oracles
  description     String?
  isActive        Boolean   @default(true)
  lastVerified    DateTime?
  createdAt       DateTime  @default(now())
}

model KPITemplate {
  id              String       @id @default(cuid())
  name            String       // e.g., "DeFi Launch", "NFT Collection"
  category        KPICategory
  kpis            Json         // Array of KPI definitions
  difficulty      DifficultyTier
  description     String?
  isPublic        Boolean      @default(true)
  createdBy       String?      // Team ID or null for system templates
  createdAt       DateTime     @default(now())
}

model ContributorRole {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    String
  roleTitle    String   // e.g., "Frontend Dev", "Smart Contract"
  description  String?
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())

  verifications Verification[]
}

model Verification {
  id                String            @id @default(cuid())
  verifier          User              @relation(fields: [verifierId], references: [id])
  verifierId        String
  contributorRole   ContributorRole   @relation(fields: [roleId], references: [id])
  roleId            String
  comment           String?
  createdAt         DateTime          @default(now())

  @@unique([verifierId, roleId])
}

model Funding {
  id            String   @id @default(cuid())
  project       Project  @relation(fields: [projectId], references: [id])
  projectId     String
  source        String   // Gitcoin, DAO, VC, etc.
  amount        Float
  currency      String   // ETH, USDC, etc.
  txHash        String?
  receivedAt    DateTime @default(now())
  distribution  Json?    // optional: breakdown among contributors
  
  investorSignatures InvestorSignature[]
}

model CredibilityScore {
  id             String   @id @default(cuid())
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?  @unique
  team           Team?    @relation(fields: [teamId], references: [id])
  teamId         String?  @unique

  score          Float    @default(0.0)
  lastUpdated    DateTime @default(now())
  details        Json?    // breakdown of scoring logic
}

// ============ SCORING SYSTEM MODELS ============

model UserScoreData {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
  
  // Core scoring metrics
  projectsShipped   Int      @default(0)
  onTimeRate        Float    @default(0.0)    // Percentage (0-100)
  budgetAccuracy    Float    @default(0.0)    // Percentage (0-100)
  abandonedProjects Int      @default(0)
  
  // Activity tracking
  lastActivity      DateTime @default(now())
  credibilityScore  Float    @default(0.0)
  totalScore        Float    @default(0.0)
  
  // Time decay tracking
  lastDecayApplied  DateTime @default(now())
  inactiveMonths    Int      @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ProjectScoreData {
  id                String   @id @default(cuid())
  project           Project  @relation(fields: [projectId], references: [id])
  projectId         String   @unique
  
  // Project type for weighting
  projectType       ProjectType @default(STARTUP)
  
  // Budget tracking
  estimatedCost     Float?
  actualCost        Float?
  budgetAccuracy    Float?   // Calculated accuracy percentage
  
  // Completion tracking
  completedAt       DateTime?
  completionTime    Int?     // Time taken in seconds
  
  // Member performance tracking
  memberScores      Json?    // Array of member performance data
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model MilestoneConfirmation {
  id                String   @id @default(cuid())
  milestone         Milestone @relation(fields: [milestoneId], references: [id])
  milestoneId       String
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  
  // Confirmation details
  confirmedAt       DateTime @default(now())
  timelinessScore   Float?   // 0-100 score based on due date
  delayDays         Int?     // Days late (negative if early)
  
  // Performance impact
  onTimeRateImpact  Float?   // Impact on user's on-time rate
  
  @@unique([milestoneId, userId])
}

model ProjectAbandonmentVote {
  id                String   @id @default(cuid())
  project           Project  @relation(fields: [projectId], references: [id])
  projectId         String
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  
  // Voting details
  votedAt           DateTime @default(now())
  reason            String?
  
  @@unique([projectId, userId])
}

model OracleVerification {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  
  // Verification details
  requestId         String   @unique
  projectId         String
  repoUrl           String
  isValid           Boolean  @default(false)
  commitCount       Int      @default(0)
  
  // Oracle response
  verifiedAt        DateTime?
  confidence        Float?   // 0-1 confidence score
  errorMessage      String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Dispute {
  id          String        @id @default(cuid())
  title       String
  description String
  status      DisputeStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum DisputeStatus {
  PENDING
  RESOLVED
  REJECTED
}

model ProjectSignature {
  id                String    @id @default(cuid())
  project           Project   @relation(fields: [projectId], references: [id])
  projectId         String
  teamId            String
  signatures        Json      // Array of SignatureData objects
  requiredSignatures Int
  totalMembers      Int
  status            SignatureStatus @default(PENDING)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([projectId])
}

model TaskSignature {
  id                String    @id @default(cuid())
  milestone         Milestone @relation(fields: [milestoneId], references: [id])
  milestoneId       String
  projectId         String
  teamId            String
  signatures        Json      // Array of SignatureData objects
  requiredSignatures Int
  totalMembers      Int
  status            SignatureStatus @default(PENDING)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([milestoneId])
}

model InvestorSignature {
  id                String    @id @default(cuid())
  project           Project   @relation(fields: [projectId], references: [id])
  projectId         String
  funding           Funding   @relation(fields: [fundingId], references: [id])
  fundingId         String
  investorAddress   String    // Wallet address of the investor
  signatures        Json      // Array of InvestorSignatureData objects
  requiredSignatures Int
  totalInvestors    Int
  status            SignatureStatus @default(PENDING)
  amount            Float
  currency          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([fundingId])
}

model MilestoneInvestorSignature {
  id                String    @id @default(cuid())
  milestone         Milestone @relation(fields: [milestoneId], references: [id])
  milestoneId       String
  project           Project   @relation(fields: [projectId], references: [id])
  projectId         String
  investorAddress   String    // Wallet address of the investor
  signatures        Json      // Array of InvestorSignatureData objects
  requiredSignatures Int
  totalInvestors    Int
  status            SignatureStatus @default(PENDING)
  amount            Float
  currency          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([milestoneId])
}

enum SignatureStatus {
  PENDING
  APPROVED
  REJECTED
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // e.g., 'join_request'
  data      Json     // e.g., { teamId, joinRequestId, ... }
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model JoinRequest {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  status    String   // 'pending', 'accepted', 'rejected'
  createdAt DateTime @default(now())
}
